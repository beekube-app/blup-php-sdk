<?php
/**
 * BLUPResultOutput
 *
 * PHP version 8.1
 *
 * @package  Beekube\BlupSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Beekube BLUP Mellifera API
 *
 * SDK PHP pour l'API BLUP de Beekube - Calcul génétique des abeilles mellifères
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@beekube.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Beekube\BlupSDK\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Beekube\BlupSDK\ObjectSerializer;

/**
 * BLUPResultOutput Class Doc Comment
 *
 * @package  Beekube\BlupSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class BLUPResultOutput extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BLUPResultOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'blup' => '\Beekube\BlupSDK\Models\QueenBeeOutput[]',
        'heritabilities' => 'array<string,\Beekube\BlupSDK\Models\HeritabilityStats>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'blup' => null,
        'heritabilities' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'blup' => false,
        'heritabilities' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'blup' => 'blup',
        'heritabilities' => 'heritabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'blup' => 'setBlup',
        'heritabilities' => 'setHeritabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'blup' => 'getBlup',
        'heritabilities' => 'getHeritabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('blup', $data ?? [], null);
        $this->setIfExists('heritabilities', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['blup'] === null) {
            $invalidProperties[] = "'blup' can't be null";
        }
        if ($this->container['heritabilities'] === null) {
            $invalidProperties[] = "'heritabilities' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets blup
     *
     * @return \Beekube\BlupSDK\Models\QueenBeeOutput[]
     */
    public function getBlup(): array
    {
        return $this->container['blup'];
    }

    /**
     * Sets blup
     *
     * @param \Beekube\BlupSDK\Models\QueenBeeOutput[] $blup blup
     *
     * @return $this
     */
    public function setBlup(array $blup): static
    {
        if (is_null($blup)) {
            throw new InvalidArgumentException('non-nullable blup cannot be null');
        }
        $this->container['blup'] = $blup;

        return $this;
    }

    /**
     * Gets heritabilities
     *
     * @return array<string,\Beekube\BlupSDK\Models\HeritabilityStats>
     */
    public function getHeritabilities(): array
    {
        return $this->container['heritabilities'];
    }

    /**
     * Sets heritabilities
     *
     * @param array<string,\Beekube\BlupSDK\Models\HeritabilityStats> $heritabilities heritabilities
     *
     * @return $this
     */
    public function setHeritabilities(array $heritabilities): static
    {
        if (is_null($heritabilities)) {
            throw new InvalidArgumentException('non-nullable heritabilities cannot be null');
        }
        $this->container['heritabilities'] = $heritabilities;

        return $this;
    }
}


