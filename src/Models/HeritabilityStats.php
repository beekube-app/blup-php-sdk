<?php
/**
 * HeritabilityStats
 *
 * PHP version 8.1
 *
 * @package  Beekube\BlupSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Beekube BLUP Mellifera API
 *
 * SDK PHP pour l'API BLUP de Beekube - Calcul génétique des abeilles mellifères
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@beekube.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Beekube\BlupSDK\Models;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Beekube\BlupSDK\ObjectSerializer;

/**
 * HeritabilityStats Class Doc Comment
 *
 * @package  Beekube\BlupSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class HeritabilityStats extends AbstractModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'HeritabilityStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'heritability' => 'float',
        'se' => 'float',
        'vAdditiveDrone' => 'float',
        'vAdditiveQueen' => 'float',
        'vColony' => 'float',
        'vResidual' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'heritability' => null,
        'se' => null,
        'vAdditiveDrone' => null,
        'vAdditiveQueen' => null,
        'vColony' => null,
        'vResidual' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'heritability' => false,
        'se' => false,
        'vAdditiveDrone' => false,
        'vAdditiveQueen' => false,
        'vColony' => false,
        'vResidual' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'heritability' => 'heritability',
        'se' => 'se',
        'vAdditiveDrone' => 'v_additive_drone',
        'vAdditiveQueen' => 'v_additive_queen',
        'vColony' => 'v_colony',
        'vResidual' => 'v_residual'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'heritability' => 'setHeritability',
        'se' => 'setSe',
        'vAdditiveDrone' => 'setVAdditiveDrone',
        'vAdditiveQueen' => 'setVAdditiveQueen',
        'vColony' => 'setVColony',
        'vResidual' => 'setVResidual'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'heritability' => 'getHeritability',
        'se' => 'getSe',
        'vAdditiveDrone' => 'getVAdditiveDrone',
        'vAdditiveQueen' => 'getVAdditiveQueen',
        'vColony' => 'getVColony',
        'vResidual' => 'getVResidual'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('heritability', $data ?? [], null);
        $this->setIfExists('se', $data ?? [], null);
        $this->setIfExists('vAdditiveDrone', $data ?? [], null);
        $this->setIfExists('vAdditiveQueen', $data ?? [], null);
        $this->setIfExists('vColony', $data ?? [], null);
        $this->setIfExists('vResidual', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['heritability'] === null) {
            $invalidProperties[] = "'heritability' can't be null";
        }
        if ($this->container['se'] === null) {
            $invalidProperties[] = "'se' can't be null";
        }
        if ($this->container['vAdditiveDrone'] === null) {
            $invalidProperties[] = "'vAdditiveDrone' can't be null";
        }
        if ($this->container['vAdditiveQueen'] === null) {
            $invalidProperties[] = "'vAdditiveQueen' can't be null";
        }
        if ($this->container['vColony'] === null) {
            $invalidProperties[] = "'vColony' can't be null";
        }
        if ($this->container['vResidual'] === null) {
            $invalidProperties[] = "'vResidual' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets heritability
     *
     * @return float
     */
    public function getHeritability(): float
    {
        return $this->container['heritability'];
    }

    /**
     * Sets heritability
     *
     * @param float $heritability heritability
     *
     * @return $this
     */
    public function setHeritability(float $heritability): static
    {
        if (is_null($heritability)) {
            throw new InvalidArgumentException('non-nullable heritability cannot be null');
        }
        $this->container['heritability'] = $heritability;

        return $this;
    }

    /**
     * Gets se
     *
     * @return float
     */
    public function getSe(): float
    {
        return $this->container['se'];
    }

    /**
     * Sets se
     *
     * @param float $se se
     *
     * @return $this
     */
    public function setSe(float $se): static
    {
        if (is_null($se)) {
            throw new InvalidArgumentException('non-nullable se cannot be null');
        }
        $this->container['se'] = $se;

        return $this;
    }

    /**
     * Gets vAdditiveDrone
     *
     * @return float
     */
    public function getVAdditiveDrone(): float
    {
        return $this->container['vAdditiveDrone'];
    }

    /**
     * Sets vAdditiveDrone
     *
     * @param float $vAdditiveDrone vAdditiveDrone
     *
     * @return $this
     */
    public function setVAdditiveDrone(float $vAdditiveDrone): static
    {
        if (is_null($vAdditiveDrone)) {
            throw new InvalidArgumentException('non-nullable vAdditiveDrone cannot be null');
        }
        $this->container['vAdditiveDrone'] = $vAdditiveDrone;

        return $this;
    }

    /**
     * Gets vAdditiveQueen
     *
     * @return float
     */
    public function getVAdditiveQueen(): float
    {
        return $this->container['vAdditiveQueen'];
    }

    /**
     * Sets vAdditiveQueen
     *
     * @param float $vAdditiveQueen vAdditiveQueen
     *
     * @return $this
     */
    public function setVAdditiveQueen(float $vAdditiveQueen): static
    {
        if (is_null($vAdditiveQueen)) {
            throw new InvalidArgumentException('non-nullable vAdditiveQueen cannot be null');
        }
        $this->container['vAdditiveQueen'] = $vAdditiveQueen;

        return $this;
    }

    /**
     * Gets vColony
     *
     * @return float
     */
    public function getVColony(): float
    {
        return $this->container['vColony'];
    }

    /**
     * Sets vColony
     *
     * @param float $vColony vColony
     *
     * @return $this
     */
    public function setVColony(float $vColony): static
    {
        if (is_null($vColony)) {
            throw new InvalidArgumentException('non-nullable vColony cannot be null');
        }
        $this->container['vColony'] = $vColony;

        return $this;
    }

    /**
     * Gets vResidual
     *
     * @return float
     */
    public function getVResidual(): float
    {
        return $this->container['vResidual'];
    }

    /**
     * Sets vResidual
     *
     * @param float $vResidual vResidual
     *
     * @return $this
     */
    public function setVResidual(float $vResidual): static
    {
        if (is_null($vResidual)) {
            throw new InvalidArgumentException('non-nullable vResidual cannot be null');
        }
        $this->container['vResidual'] = $vResidual;

        return $this;
    }
}


